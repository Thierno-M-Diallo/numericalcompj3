import tkinter as tk
from tkinter import ttk
import numpy as np
from scipy.linalg import solve, diagsvd

class JacobiGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Jacobi Method Solver")

        self.create_widgets()

    def create_widgets(self):
        # Matrix Size Entry
        self.label_size = ttk.Label(self.master, text="Enter the size of the matrix:")
        self.label_size.grid(row=0, column=0, padx=10, pady=5)
        self.entry_size = ttk.Entry(self.master)
        self.entry_size.grid(row=0, column=1, padx=10, pady=5)

        # Augmented Matrix Entry
        self.label_matrix = ttk.Label(self.master, text="Enter the augmented matrix:")
        self.label_matrix.grid(row=1, column=0, padx=10, pady=5)
        self.entry_matrix = ttk.Entry(self.master)
        self.entry_matrix.grid(row=1, column=1, padx=10, pady=5)

        # Stop Method Entry
        self.label_stop_method = ttk.Label(self.master, text="Choose a stop method:")
        self.label_stop_method.grid(row=2, column=0, padx=10, pady=5)
        self.stop_method_var = tk.StringVar()
        self.stop_method_var.set("threshold")
        self.stop_method_combobox = ttk.Combobox(self.master, textvariable=self.stop_method_var, values=["threshold", "mae", "rmse"])
        self.stop_method_combobox.grid(row=2, column=1, padx=10, pady=5)

        # Threshold Entry
        self.label_threshold = ttk.Label(self.master, text="Enter the threshold:")
        self.label_threshold.grid(row=3, column=0, padx=10, pady=5)
        self.entry_threshold = ttk.Entry(self.master)
        self.entry_threshold.grid(row=3, column=1, padx=10, pady=5)

        # Starting Approximation Entry
        self.label_start_approx = ttk.Label(self.master, text="Do you want to enter an approximation? (yes or no):")
        self.label_start_approx.grid(row=4, column=0, padx=10, pady=5)
        self.start_approx_var = tk.StringVar()
        self.start_approx_var.set("no")
        self.start_approx_combobox = ttk.Combobox(self.master, textvariable=self.start_approx_var, values=["yes", "no"])
        self.start_approx_combobox.grid(row=4, column=1, padx=10, pady=5)

        # Starting Approximation Value Entry
        self.label_start_approx_value = ttk.Label(self.master, text="Enter the starting approximation:")
        self.label_start_approx_value.grid(row=5, column=0, padx=10, pady=5)
        self.entry_start_approx_value = ttk.Entry(self.master)
        self.entry_start_approx_value.grid(row=5, column=1, padx=10, pady=5)

        # Solve Button
        self.solve_button = ttk.Button(self.master, text="Solve", command=self.solve_jacobi)
        self.solve_button.grid(row=6, column=0, columnspan=2, pady=10)

        # Result Label
        self.result_label = ttk.Label(self.master, text="")
        self.result_label.grid(row=7, column=0, columnspan=2, pady=5)

    def solve_jacobi(self):
        try:
            size = int(self.entry_size.get())
            matrix_str = self.entry_matrix.get()

            # Parse the matrix string and reshape it
            matrix = np.array(list(map(float, matrix_str.split())))
            matrix = matrix.reshape((size, size + 1))

            # Check if the matrix is square
            if matrix.shape[0] != matrix.shape[1] - 1:
                raise ValueError("Matrix must be square.")

            # Separate coefficients and constants
            A = matrix[:, :-1]
            b = matrix[:, -1]

            # Check for matrix singularity
            if np.linalg.matrix_rank(A) < np.linalg.matrix_rank(matrix):
                result = "Error: The matrix is singular. No unique solution exists."
            else:
                # Check diagonal dominance
                if not self.is_diag_dominant(A):
                    result = "Warning: The matrix is not diagonally dominant."

                # Use Jacobi method to solve the system
                stop_method = self.stop_method_var.get()
                threshold = float(self.entry_threshold.get())
                start_approximation = self.start_approx_var.get()
                start_approx_value = None

                if start_approximation == "yes":
                    start_approx_value = np.array(list(map(float, self.entry_start_approx_value.get().split())))

                    if len(start_approx_value) != size:
                        raise ValueError("Incorrect starting approximation input.")

                x, iterations = self.jacobi_method(A, b, start_approx_value, stop_method, threshold)

                result = f"Roots: {x}\nNumber of iterations: {iterations}"

                true_error = self.calculate_true_mean_absolute_error(A, b, x)
                result += f"\nTrue Mean Absolute Error: {true_error}"

            self.result_label.config(text=result)

        except Exception as e:
            self.result_label.config(text=f"Error: {str(e)}")

    def jacobi_method(self, A, b, x0, stop_method, threshold):
        n = len(b)
        max_iterations = 1000
        x = x0 if x0 is not None else np.zeros(n)

        iterations = 0
        while iterations < max_iterations:
            x_prev = np.copy(x)

            for i in range(n):
                sigma = np.dot(A[i, :i], x_prev[:i]) + np.dot(A[i, i+1:], x_prev[i+1:])
                x[i] = (b[i] - sigma) / A[i, i]

            if stop_method == 'threshold' and np.linalg.norm(x - x_prev, np.inf) < threshold:
                break
            elif stop_method == 'mae' and self.calculate_true_mean_absolute_error(A, b, x) < threshold:
                break
            elif stop_method == 'rmse':
                current_rmse = np.sqrt(np.mean((np.dot(A, x) - b)**2))
                if current_rmse < threshold:
                    break

            iterations += 1

        if iterations == max_iterations:
            print('Maximum number of iterations reached.')

        return x, iterations

    def is_diag_dominant(self, A):
        diagonal_dominance = all(abs(np.diag(A)) > np.sum(abs(A), axis=1) - abs(np.diag(A)))
        return diagonal_dominance

    def calculate_true_mean_absolute_error(self, A, B, roots):
        true_error = np.mean(np.abs(np.dot(A, roots) - B))
        return true_error

if __name__ == "__main__":
    root = tk.Tk()
    app = JacobiGUI(root)
    root.mainloop()
