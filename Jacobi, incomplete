
function Jacobi()
    n = input('Enter a number of equations: ');

    disp('Enter the matrix include the coefficients');
    coefficientMatrix = zeros(n, n + 1);

    for i = 1:n
        rowVal = str2num(input(['Enter the coefficients ' num2str(i) ': '], 's'));

        if numel(rowVal) ~= n + 1
            disp('Error: Incorrect number of coefficients were entered.');
            return;
        end

        coefficientMatrix(i, :) = rowVal;
    end

    right = coefficientMatrix(:, end);
    coefficientMatrix = coefficientMatrix(:, 1:end-1);

    if ~isDiagDominant(coefficientMatrix)
        disp('Invalid: The Matrix is not diagonally dominant.');
        return;
    end

    method = input('Enter the Jacobi method: ', 's');
    stopMethod = input('Choose a stop method: ', 's');

    switch stopMethod
        case 'threshold'
            threshold = input('Enter the threshold: ');
        otherwise
            threshold = NaN;
    end

    startApprox = NaN;
    if strcmp(input('Do you want to enter an approximation? Please enter yes or no: ', 's'), 'yes')
        startApprox = str2num(input('Please Enter the starting approximation: ', 's'));

        if isempty(startApprox) || ~isvector(startApprox) || numel(startApprox) ~= n
            disp('Error: Incorrect starting approximation input.');
            return;
        end
    end

    switch method
        case 'Jacobi'
            [x, iterations] = jacobiMethod(coefficientMatrix, right, startApprox, stopMethod, threshold);

  
            disp('Roots:');
            disp(x);
            disp(['Number of iterations = ' num2str(iterations)]);

            
            trueError = calculateTrueMeanAbsoluteError(coefficientMatrix, right, x);
            disp(['True Mean Absolute Error: ' num2str(trueError)]);

        otherwise
            disp('Error must use Jacobi.');
    end
end

function [x, iterations] = jacobiMethod(A, b, x0, stopMethod, threshold)
    n = length(b);
    maxIterations = 1000;
    x = x0;

    iterations = 0;
    while iterations < maxIterations
        xPrev = x;

        for i = 1:n
            sigma = sum(A(i, 1:i-1) .* xPrev(1:i-1)) + sum(A(i, i+1:end) .* xPrev(i+1:end));
            x(i) = (b(i) - sigma) / A(i, i);
        end

     
switch stopMethod
    case 'threshold'
        if norm(x - xPrev, inf) < threshold
            break;
        end
end

        iterations = iterations + 1;
    end

    if iterations == maxIterations
        disp('Maximum num of iterations.');
    end
end

function trueError = calculateTrueMeanAbsoluteError(A, B, roots)
    trueError = mean(abs(A * roots' - B));
end

function diagonalDominance = isDiagDominant(A)
    diagonalDominance = all(abs(diag(A)) > sum(abs(A), 2) - abs(diag(A)));
end

