//I hardcoded the matrix/ a majority of things. need to add more user implementation in order to abide by the rules
//also eventually change to matlab format

//12-5 UPDATED
//added user implementation of code, user can put things to it


function gauss_seidel_method
    % User input for the size of the matrix
    n = input('Enter the number of unknowns: ');
    
    % Initialize the augmented matrix with zeros
    A = zeros(n,n+1);
    
    % User input for augmented matrix
    fprintf('Enter augmented matrix coefficients row-wise:\n');
    for i=1:n
        for j=1:n+1
            A(i,j) = input(sprintf('A(%d,%d) = ', i, j));
        end
    end
    
    % User input for initial guess
    initial_guess = input('Enter initial guess or press Enter to use zeros: ', 's');
    if isempty(initial_guess)
        x = zeros(n,1);
    else
        x = str2num(initial_guess);
    end
    
    % Tolerance and maximum iterations
    tol = input('Enter the tolerance for method: ');
    max_iter = input('Enter maximum number of iterations: ');
    
    % Gauss-Seidel Iteration
    x = gaussSeidel(A, x, tol, max_iter);
    
    % Display the results
    disp('The solution vector is: ');
    disp(x);
end

function x = gaussSeidel(A, x, tol, max_iter)
    n = size(A, 1);
    for iter = 1:max_iter
        x_old = x;
        
        for i = 1:n
            sigma = 0;
            for j = 1:n
                if j ~= i
                    sigma = sigma + A(i,j) * x(j);
                end
            end
            x(i) = (A(i,n+1) - sigma) / A(i,i);
        end
        
        % Stopping condition
        if norm(x - x_old, inf) < tol
            return;
        end
    end
    
    % If reached here, max iterations were reached without converging
    disp('The method did not converge.');
end
