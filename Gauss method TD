//I hardcoded the matrix/ a majority of things. need to add more user implementation in order to abide by the rules
//also eventually change to matlab format

//12-5 UPDATED
//added user implementation of code, user can put things to it


#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

vector<double> gaussSeidel(vector<vector<double>>& A, vector<double>& b, vector<double>& initialGuess, double tolerance) {
    int n = A.size();
    vector<double> x = initialGuess;
    vector<double> prevX(n);
    bool continueIteration;

    do {
        continueIteration = false;
        for (int i = 0; i < n; ++i) {
            prevX[i] = x[i];
        }

        for (int i = 0; i < n; ++i) {
            double sum = 0.0;
            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    sum += A[i][j] * x[j];
                }
            }
            x[i] = (b[i] - sum) / A[i][i];

            if (abs(x[i] - prevX[i]) > tolerance) {
                continueIteration = true;
            }
        }
    } while (continueIteration);

    return x;
}

int main() {
    int n;
    cout << "Enter the number of variables: ";
    cin >> n;

    vector<vector<double>> A(n, vector<double>(n));
    vector<double> b(n);
    vector<double> initialGuess(n);

    cout << "Enter the augmented matrix row by row, ending each row with the right-hand side value:\n";
    for (int i = 0; i < n; ++i) {
        cout << "Row " << (i + 1) << ": ";
        for (int j = 0; j < n; ++j) {
            cin >> A[i][j];
        }
        cin >> b[i];
    }

    cout << "Enter initial guesses for the solution:\n";
    for (int i = 0; i < n; ++i) {
        cout << "Initial guess for x[" << (i + 1) << "]: ";
        cin >> initialGuess[i];
    }

    double tolerance;
    cout << "Enter the tolerance for the stopping criterion: ";
    cin >> tolerance;

    vector<double> x = gaussSeidel(A, b, initialGuess, tolerance);

    cout << "The solution is:\n";
    for (int i = 0; i < n; ++i) {
        cout << "x[" << (i + 1) << "] = " << x[i] << endl;
    }

    return 0;
}








